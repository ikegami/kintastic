-- ================================================================================
-- Tool to avoid accidental double-clicks.
--
-- Usage:
--    Debouncer.debounce(
--       "on_click_advance_game",
--       function(name)
--          UI.setAttribute("advance_game_button", "onClick", name)
--       end,
--       function(debouncer, button_used, player, mouse_button, button_id)
--          -- Check permissions, if it's ok to press button now, etc
--          if ... then
--             return
--          end
--
--          button_used()
--
--          advance_game()
--       end
--    )
-- ================================================================================

-- Modules.
local TableLock = require("kintastic/lib/TableLock")

-- Imports.
local declare_and_set = TableLock.declare_and_set

-- The class.
local Debouncer = { }

Debouncer.mt = {
   __index = Debouncer,
}


-- ================================================================================
-- Privates

-- ----------------------------------------
-- Private function on_click_dummy

local function on_click_dummy()
end


-- ================================================================================
-- Public interface

-- ----------------------------------------
-- Public function debounce

function Debouncer.debounce(name, setter, handler, opts)
   local self = Debouncer:new(name, setter, handler, opts)
   self:install()
   return self
end


-- ----------------------------------------
-- Public constructor Debouncer:new
--
-- - name:         The base name of the button click handler to create.
-- - setter:       A function that updates the Lua or XML buttons.
-- - handler:      When the button is clicked, this function will be
--                 called with the same arguments as provided as the
--                 button click handler would normally receive plus
--                 one leading argument. This leading argument must
--                 be called as a function on a successful click.
-- - opts:         Optional table of options:
--   - cool_down:  A period of time in which for which the button
--                 will be ignored after it has been clicked.
--   - on_disable: Called when the button becomes disabled
--                 (manually or when a cool-down period begins).
--   - on_enable:  Called when the button becomes enabled
--                 (manually or when a cool-down period begins).

function Debouncer.new(class, name, setter, handler, opts)
   local self = setmetatable({}, class.mt)

   self.name              = name
   self.setter            = setter
   self.handler           = handler
   self.opts              = opts or { }
   self.counter           = 0
   self.manually_disabled = false
   self.in_cool_down      = false
   self.wrapped_handler   = nil

   return self
end


-- ----------------------------------------
-- Public instance method debouncer:install

function Debouncer:install()
   local expired = false

   local function button_used()
      expired = true
      self:install()
   end

   local function wrapped_handler(...)
      if expired or self:_is_disabled() then
         return
      end

      return self:handler(button_used, ...)
   end

   if self.opts.cool_down and self.counter > 0 then
      self:_disable("in_cool_down")

      Wait.time(
         function()
            self:_enable("in_cool_down")
         end,
         self.opts.cool_down
      )
   end

   self.wrapped_handler = wrapped_handler

   local old_handler_name = "on_click_advance_game_" .. self.counter
   self.counter = self.counter + 1
   local new_handler_name = "on_click_advance_game_" .. self.counter

   declare_and_set(_G, new_handler_name, wrapped_handler)
   self.setter(new_handler_name)

   if self.counter > 1 then
      _G[old_handler_name] = on_click_dummy
   end
end


-- ----------------------------------------
-- Public instance method debouncer:call
--
-- WARNING: Calling this defies some of the protection offered by this module.

function Debouncer:call(...)
   self.wrapped_handler(...)
end


-- ----------------------------------------
-- Public instance method debouncer:enable
-- Public instance method debouncer:disable
--
-- Manually enable or disable the button.

function Debouncer:disable()
   self:_disable("manually_disabled")
end

function Debouncer:enable()
   self:_enable("manually_disabled")
end


-- ----------------------------------------
-- Public instance accessors

function Debouncer:get_opt_cool_down()
   return self.opts.cool_down
end

function Debouncer:set_opt_cool_down(val)
   self.opts.cool_down = val
end


-- ================================================================================
-- Privates

function Debouncer:_is_disabled()
   return self.manually_disabled or self.in_cool_down
end


function Debouncer:_disable(attr)
   local was_disabled = self:_is_disabled()
   self[attr] = true
   if not was_disabled and self.opts.on_disable then
      self.opts.on_disable(self)
   end
end


function Debouncer:_enable(attr)
   self[attr] = false
   local disabled = self:_is_disabled()
   if not disabled and self.opts.on_enable then
      self.opts.on_enable(self)
   end
end


-- ================================================================================

return Debouncer
