-- ================================================================================
-- Table locking tools
--
-- This module is partially broken until TTS upgrades Moonsharp beyond 1.5.0.0.
-- A bug fixed in Moonsharp 1.6.0.0 is preventing `__newindex` from being used.
-- https://github.com/moonsharp-devs/moonsharp/issues/133
-- Until such a time, no check is performed on writes as doing so in a loop
-- can result in a mysterious "Unexpected LuaType Tuple" fatal error.
-- ================================================================================

-- Forward declarations for privates found at the bottom.
local attach_self

-- The module.
local TableLock = { }


-- ----------------------------------------
-- Disable functionality that runs afoul of a bug in Moonsharp <1.6.0.0. See module header for details.

local buggy = _VERSION == "MoonSharp 1.5.0.0"


-- ----------------------------------------
-- Public attributes
--
-- TableLock.on_violation(msg) is called on a constraint violation.
-- - TableLock.on_violation(msg) may call error() to abort execution.
-- - If TableLock.on_violation(msg) returns something true, the operation will proceed.
-- - If TableLock.on_violation(msg) returns something false, the operationg will fail silently.
-- - Note that TableLock.on_violation(msg) is also called if declare, declare_and_set or merge is misused.
-- - Three ready-made handlers are provided for your convenience:
--   - TableLock.fatal_violation
--   - TableLock.announce_violation
--   - TableLock.ignore_violation
--
-- TableLock.limited_functionality reports if functionality has been disabled to
-- avoid running afoul of a bug in Moonsharp <1.6.0.0. See module header for details.

TableLock.if_dev = nil                    -- OBSOLETE. Use a custom on_violation instead.
TableLock.on_violation = error            -- Editable.
TableLock.limited_functionality = buggy   -- Read-only.


-- ----------------------------------------
-- Public function TableLock.declare
--
-- Access to the list of provided names will no
-- longer be forbidden for the provided table.

function TableLock.declare(tbl, ...)
   local mt = getmetatable(tbl)
   local self = mt and mt.___TableLock
   if not self then
      if TableLock.on_violation("Table needs to have been locked at some point.") then
         add_state(tbl)
      end

      return
   end

   local c = select("#", ...)
   for i = 1, c do
      local k = select(i, ...)
      self.declared[k] = true
   end
end


-- ----------------------------------------
-- Public function TableLock.declare_and_set

function TableLock.declare_and_set(tbl, k, v)
   TableLock.declare(tbl, k)
   tbl[k] = v
end


-- ----------------------------------------
-- Public function TableLock.merge

function TableLock.merge(dst, src)
   local mt = getmetatable(dst)
   local self = mt and mt.___TableLock
   if not self then
      if TableLock.on_violation("Table needs to have been locked at some point.") then
         add_state(tbl)
      end

      return
   end

   for k, v in pairs(src) do
      self.declared[k] = true
      dst[k] = v
   end
end


-- ----------------------------------------
-- Public function TableLock.lock
--
-- Prevents any accesses or changes to undeclared fields of a table.
-- Fields already in the table when this is called are considered declared.
-- Fields can also be declared using `.declare()` and `.declare_and_set()`.
--
-- Locking a table that's already locked has no effect.

function TableLock.lock(tbl)
   local mt, self = attach_self(tbl)
   if self.enabled then
      return tbl
   end

   for k in pairs(tbl) do
      self.declared[k] = true
   end

   self.enabled = true

   if not self.hooked then
      local old_index    = mt.__index    or rawget
      local old_newindex = mt.__newindex or rawset

      mt.__index = function(t, k)
         if not self.declared[k] and self.enabled then
            if not TableLock.on_violation("Undeclared access of " .. tostring(k)) then
               return
            end
         end

         return old_index(t, k)
      end

      if not buggy then
         mt.__newindex = function(t, k, v)
            if not self.declared[k] and self.enabled then
               if not TableLock.on_violation("Undeclared write to " .. tostring(k)) then
                  return
               end
            end

            return old_newindex(t, k, v)
         end
      end

      self.hooked = true
   end

   return tbl
end


-- ----------------------------------------
-- Public function TableLock.lock_if_dev
--
-- OBSOLETE. For backwards compatibility only.

function TableLock.lock_if_dev(tbl)
   add_state(tbl)
   return tbl
end


-- ----------------------------------------
-- Public function TableLock.rlock
--
-- A recursive version of TableLock.lock

function TableLock.rlock(tbl)
   TableLock.lock(tbl)

   for k, v in pairs(tbl) do
      if type(v) == "table" then
         TableLock.rlock(v)
      end
   end

   return tbl
end


-- ----------------------------------------
-- Public function TableLock.rlock_if_dev
--
-- OBSOLETE. For backwards compatibility only.

function TableLock.rlock_if_dev(tbl)
   add_state(tbl)

   for k, v in pairs(tbl) do
      if type(v) == "table" then
         TableLock.rlock_if_dev(v)
      end
   end

   return tbl
end


-- ----------------------------------------
-- Public function TableLock.unlock
--
-- For the extent of the call to the callback,
-- no access to the provided table will be forbidden.
--
-- The first value returned by the callback is returned.
-- This function is tolerant of exceptions in the callback.

function TableLock.unlock(tbl, cb)
   local mt = getmetatable(tbl)
   local self = mt and mt.___TableLock
   if not self or not self.enabled then
      return cb()
   end

   local success, rv = pcall(
      function()
         self.enabled = false
         cb()
         self.enabled = true

         local declared = self.declared
         for k in pairs(tbl) do
            declared[k] = true
         end
      end
   )

   self.enabled = true

   if success then
      return rv
   else
      error(rv)
   end
end


-- ----------------------------------------
-- Public function TableLock.declare_atom_symbols
--
-- Useful if you lock _G and use the TTS plugin for Atom.
-- _G must be locked before calling this.

function TableLock.declare_atom_symbols()
   TableLock.declare(_G,
      "__atom_highlight_guid",
      "__atom_highlight_guids"
   )
end


-- ================================================================================
-- Public on_violation handlers.

-- ----------------------------------------
-- Public on_violation handler TableLock.fatal_violation
--
-- Announce the violation and proceed normally.

TableLock.fatal_violation = error


-- ----------------------------------------
-- Public on_violation handler TableLock.announce_violation
--
-- Announce the violation to the host and proceed normally.

function TableLock.announce_violation(msg)
   for i, player in ipairs(Player.getPlayers()) do
      if player.host then
         broadcastToColor(msg, player.color, Color.Red)
         break
      end
   end

   return true
end


-- ----------------------------------------
-- Public on_violation handler TableLock.ignore_violation
--
-- Proceed normally.

function TableLock.ignore_violation(msg)
   return true
end


-- ================================================================================
-- Privates

-- ----------------------------------------
-- Private function attach_self

function attach_self(tbl)
   local mt = getmetatable(tbl)
   if not mt then
      mt = { }
      setmetatable(tbl, mt)
   end

   local self = mt.___TableLock
   if not self then
      self = {
         hooked   = false,
         enabled  = false,
         declared = { },
      }

      mt.___TableLock = self
   end

   return mt, self
end


-- ================================================================================

return TableLock
