-- ================================================================================
-- Constant tables
-- ================================================================================

-- Forward declarations for privates found at the bottom.
local attach_self

-- The module.
local Const = { }


-- ----------------------------------------
-- Public attributes
--
-- Const.on_violation(msg) is called on a constraint violation.
-- - Const.on_violation(msg) may call error() to abort execution.
-- - If Const.on_violation(msg) returns something true, the operation will proceed.
-- - If Const.on_violation(msg) returns something false, the operationg will fail silently.
-- - Note that Const.on_violation(msg) is also called if declare, declare_and_set or merge is misused.
-- - Three ready-made handlers are provided for your convenience:
--   - Const.fatal_violation
--   - Const.announce_violation
--   - Const.ignore_violation
--
-- Const.limited_functionality reports if functionality has been disabled to
-- avoid running afoul of a bug in Moonsharp <1.6.0.0. See module header for details.

Const.is_dev = false         -- OBSOLETE. Use a custom on_violation instead.
Const.on_violation = error   -- Editable.


-- ----------------------------------------
-- Public function Const.const
--
-- Prevents any changes or additions to the provided table.

function Const.const(tbl)
   local mt, self = attach_self(tbl)
   if not self.hooked then
      local old_newindex = mt.__newindex or rawset

      mt.__newindex = function(t, k, v)
         if not Const.on_violation("Can't modify constant table.") then
            return
         end

         return old_newindex(t, k, v)
      end

      self.hooked = true
   end

   return tbl
end


-- ----------------------------------------
-- Public function Const.const_if_dev
--
-- OBSOLETE. For backwards compatibility only.

function Const.const_if_dev(tbl)
   if Const.is_dev then
      Const.const(tbl)
   end

   return tbl
end


-- ----------------------------------------
-- Public function Const.rconst
--
-- A recursive version of Const.const

function Const.rconst(tbl)
   for k, v in pairs(tbl) do
      if type(v) == "table" then
         Const.rconst(v)
      end
   end

   return Const.const(tbl)
end


-- ----------------------------------------
-- Public function Const.rconst_if_dev
--
-- OBSOLETE. For backwards compatibility only.

function Const.rconst_if_dev(tbl)
   if Const.is_dev then
      Const.rconst(tbl)
   end

   return tbl
end


-- ================================================================================
-- Public on_violation handlers.

-- ----------------------------------------
-- Public on_violation handler Const.fatal_violation
--
-- Announce the violation and proceed normally.

Const.fatal_violation = error


-- ----------------------------------------
-- Public on_violation handler Const.announce_violation
--
-- Announce the violation to the host and proceed normally.

function Const.announce_violation(msg)
   for i, player in ipairs(Player.getPlayers()) do
      if player.host then
         broadcastToColor(msg, player.color, Color.Red)
         break
      end
   end

   return true
end


-- ----------------------------------------
-- Public on_violation handler Const.ignore_violation
--
-- Proceed normally.

function Const.ignore_violation(msg)
   return true
end


-- ================================================================================
-- Privates

-- ----------------------------------------
-- Private function attach_self

function attach_self(tbl)
   local mt = getmetatable(tbl)
   if not mt then
      mt = { }
      setmetatable(tbl, mt)
   end

   local self = mt.___Const
   if not self then
      self = {
         hooked = false,
      }

      mt.___Const = self
   end

   return mt, self
end


-- ================================================================================

return Const
