-- ================================================================================
-- Promise class
-- The PromiseClass module provides the actual class, while this
-- module provides ways of constructing instances of that class.
-- This allows us to have constructors and instances methods with the same name.
-- ================================================================================

-- Modules.
local Errors        = require("kintastic/lib/Errors")
local Introspection = require("kintastic/lib/Introspection")
local Iters         = require("kintastic/lib/Iters")
local PromiseClass  = require("kintastic/lib/PromiseClass")

-- Imports.
local is_callable    = Introspection.is_callable
local is_instance_of = Introspection.is_instance_of
local ivalues        = Iters.ivalues

-- The class.
-- Contains only constuctors.
-- Never instantiated.
local Promise = { }


-- ================================================================================
-- Public constructors

-- ----------------------------------------
-- Public constructor Promise:new

function Promise.new(class, executor)
   return PromiseClass:new(executor)
end


-- ----------------------------------------
-- Public constructor Promise:try
--
-- Usage:
--    local promise = Promise:try(
--       function()
--          ...
--          error(reason)
--          ...
--          return x
--       end
--    )
--
-- The above example is equivalent to
--
--    local promise = Promise:new(
--       function(resolve, reject)
--          ...
--          reject(reason)
--          ...
--          resolve(x)
--       end
--    )
--
-- This can be used in lieu of a Promise:new when
-- either resolve() or reject() is always called
-- before the callback returns.

function Promise.try(class, func)
   return class:new(
      function(resolve, reject)
         resolve(func())
      end
   )
end


-- ----------------------------------------
-- Public constructor Promise:timeout
--
-- Create a promise that becomes rejected after a specified amount of time.

function Promise.timeout(class, seconds)
   return class:new(
      function(resolve, reject)
         Wait.time(||reject(Errors.ETIMEOUT), seconds)
      end
   )
end


-- ----------------------------------------
-- Public constructor Promise:fulfill.
--
-- Creates a promise that's fulfilled with the provided value.
-- You normally want to use Promise:resolve() instead.

function Promise.fulfill(class, value)
   local promise = Promise:new()
   promise:_transition(false, Promise.States.FULFILLED, value)
   return promise
end


-- ----------------------------------------
-- Public constructor Promise:reject
--
-- Creates a promise that's rejected.

function Promise.reject(class, reason)
   local promise = Promise:new()
   promise:_transition(false, Promise.States.REJECTED, reason)
   return promise
end


-- ----------------------------------------
-- Public constructor Promise:resolve
--
-- Usage:
--    local promise = Promise:resolve(x)
--
-- Used to create a fulfilled promise, or
-- to ensure that something is a Promise.
--
-- If `x` is a Promise, it's simply returned.
-- If `x` is Promise-like, a Promise that mirrors `x` is returned.
-- Otherwise, a promised already fulfilled with the value of `x` is returned.

function Promise.resolve(class, x)
   local success, rv = pcall(
      function()
         -- Return a prebuilt promise if one exists.
         do
            local promise = class.promises[ x == nil and Promise.NIL or x ]
            if promise then
               return promise
            end
         end

         if is_instance_of(x, PromiseClass) then
            return x
         end

         if type(x) == "table" then
            -- We specifically want to avoid accessing x.next twice.
            local next = x.next
            if is_callable(next) then
               local promise = class:new()
               promise:_adopt_promiselike(o, next)
               return promise
            end
         end

         return class:fulfill(x)
      end
   )

   if success then
      return rv
   else
      return class:reject(rv)
   end
end


-- ----------------------------------------
-- Public constructor Promise:all_settled
--
-- Usage:
--    local promise = Promise:all_settled({ promise1, promise2, ... })
--
-- Returns a promise.
-- The promise becomes fulfilled once all of the provided promises have become fulfilled or rejected.
-- The fulfillment value is an array of information the fulfillment/rejection state of each promise.
-- Passing an empty array returns a  fulfilled promise.

function Promise.all_settled(class, array)
   return class:new(
      function(resolve, reject)
         local results = { }
         local num_pending = 0
         for i, promise in ipairs(array) do
            promise = class:resolve(promise)
            num_pending = num_pending + 1
            promise:next(
               function(value)
                  results[i] = { status = "fulfilled", value = value }
                  num_pending = num_pending - 1
                  if num_pending == 0 then
                     resolve(results)
                  end
               end,
               function(reason)
                  results[i] = { status = "rejected", reason = reason }
                  num_pending = num_pending - 1
                  if num_pending == 0 then
                     resolve(results)
                  end
               end
            )
         end

         if num_pending == 0 then
            resolve(results)
         end
      end
   )
end


-- ----------------------------------------
-- Public constructor Promise:all
--
-- Usage:
--    local promise = Promise:all({ promise1, promise2, ... })
--
-- Returns a promise.
-- The promise becomes fulfilled once all of the provided promises have become fulfilled.
-- The fulfillment value is an array of the fulfillment values of the fulfilled promises.
-- The promise becomes rejected once any of the provided promises has become rejected.
-- The rejection reason is the rejection reason of the rejected promise.
-- Passing an empty array returns a promise fulfilled with an empty array.

function Promise.all(class, array)
   return class:new(
      function(resolve, reject)
         local values = { }
         local num_pending = 0
         for i, promise in ipairs(array) do
            promise = class:resolve(promise)
            num_pending = num_pending + 1
            promise:next(
               function(value)
                  values[i] = value
                  num_pending = num_pending - 1
                  if num_pending == 0 then
                     resolve(values)
                  end
               end,
               reject
            )
         end

         if num_pending == 0 then
            resolve(values)
         end
      end
   )
end


-- ----------------------------------------
-- Public constructor Promise:any
--
-- Usage:
--    local promise = Promise:any({ promise1, promise2, ... })
--
-- Returns a promise.
-- The promise becomes fulfilled once any of the provided promises has become fulfilled.
-- The fulfillment value is the fulfillment value of the fulfilled promise.
-- The promise becomes rejected once all of the provided promises have become rejected.
-- The rejection reason an array of the rejection resons of the rejected promises.
-- Passing an empty array returns a promise fulfilled with an empty array.

function Promise.any(class, array)
   return class:new(
      function(resolve, reject)
         local reasons = { }
         local num_pending = 0
         for i, promise in ipairs(array) do
            promise = class:resolve(promise)
            num_pending = num_pending + 1
            promise:next(
               resolve,
               function(reason)
                  reasons[i] = reason
                  num_pending = num_pending - 1
                  if num_pending == 0 then
                     reject(reasons)
                  end
               end
            )
         end

         if num_pending == 0 then
            reject(reasons)
         end
      end
   )
end


-- ----------------------------------------
-- Public constructor Promise:race
--
-- Usage:
--    local promise = Promise:race({ promise1, promise2, ... })
--
-- Returns a promise.
-- The promise becomes fulfilled once any of the provided promises has become fulfilled.
-- The fulfillment value is the fulfillment value of the fulfilled promise.
-- The promise becomes rejected once any of the provided promises has become rejected.
-- The rejection reason is the rejection reason of the rejected promise.
-- Passing an empty array returns a fulfilled promise.

function Promise.race(class, array)
   if #array <= 1 then
      return Promise:resolve(array[1])
   end

   return class:new(
      function(resolve, reject)
         for i, promise in ipairs(array) do
            promise = class:resolve(promise)
            promise:next(resolve, reject)
         end
      end
   )
end


-- ================================================================================
-- Public functions

-- ----------------------------------------
-- Public function Promise.all_settled_error_logger
--
-- Usage:
--    Promise:all_settled(promises)
--    :next(Promise.all_settled_error_logger)
--
-- Note that this isn't a method!

function Promise.all_settled_error_logger(value)
   for result in ivalues(value) do
      if result.status == "rejected" then
         -- XXX Should handle weird reasons better. Especially since this is in a loop.
         broadcastToAll(result.reason, Color.Red)
      end
   end

   return value
end


-- ================================================================================
-- Semi-public
-- You probably shouldn't be using these directly.

-- ----------------------------------------
-- Semi-public state constants.

Promise.States = PromiseClass.States


-- ----------------------------------------
-- Semi-public pregenerated promises.

-- This is used as the key when looking for a prebuilt promise for `nil`.
Promise.NIL = { }

Promise.promises = {
   [ Promise.NIL ] = Promise:fulfill(nil),
   [ true        ] = Promise:fulfill(true),
   [ false       ] = Promise:fulfill(false),
   [ 0           ] = Promise:fulfill(0),
   [ ""          ] = Promise:fulfill(""),
}


-- ================================================================================

return Promise
