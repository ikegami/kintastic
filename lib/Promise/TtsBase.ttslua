-- ================================================================================
-- Promise-based version of base methods.
-- ================================================================================

-- Modules.
local Promise    = require("kintastic/lib/Promise")
local TableUtils = require("kintastic/lib/TableUtils")

-- Forward declarations for privates found at the bottom.
local spawner

-- The module.
local TtsBase = { }


-- ================================================================================
-- Public interface

-- ----------------------------------------
-- Public function TtsBase.spawnObject
--
-- This is a thin wrapper around `spawnObject` that returns a promise that
-- becomes fulfilled with the spawned object once the object has been created.
--
-- If a `callback_function` argument is provided, the returned promise will
-- adopt the value returned by the callback function.
--
-- If a `return_obj` argument is provided and true, the spawned object will
-- be returned as a second value.
--
-- You may replace the global spawnObject with this function.

local wrapped_spawn_object = spawnObject

function TtsBase.spawnObjectJSON(args)
   return spawner(wrapped_spawn_object, args)
end


-- ----------------------------------------
-- Public function TtsBase.spawnObjectData
--
-- This is a thin wrapper around `spawnObjectData` that returns a promise that
-- becomes fulfilled with the spawned object once the object has been created.
--
-- If a `callback_function` argument is provided, the returned promise will
-- adopt the value returned by the callback function.
--
-- If a `return_obj` argument is provided and true, the spawned object will
-- be returned as a second value.
--
-- You may replace the global spawnObjectData with this function.

local wrapped_spawn_object_data = spawnObjectData

function TtsBase.spawnObjectData(args)
   return spawner(wrapped_spawn_object_data, args)
end


-- ----------------------------------------
-- Public function TtsBase.spawnObjectJSON
--
-- This is a thin wrapper around `spawnObjectJSON` that returns a promise that
-- becomes fulfilled with the spawned object once the object has been created.
--
-- If a `callback_function` argument is provided, the returned promise will
-- adopt the value returned by the callback function.
--
-- If a `return_obj` argument is provided and true, the spawned object will
-- be returned as a second value.
--
-- You may replace the global spawnObjectJSON with this function.

local wrapped_spawn_object_json = spawnObjectJSON

function TtsBase.spawnObjectJSON(args)
   return spawner(wrapped_spawn_object_json, args)
end


-- ================================================================================
-- Privates

-- ----------------------------------------
-- Private function spawner

function spawner(wrapped_function, args)
   local spawned_obj
   local promise = Promise:new(
      function(resolve, reject)
         args = args and TableUtils.copy(args) or { }

         if args.callback_function then
            local orig_cb = args.callback_function
            args.callback_function = function(obj)
               resolve(orig_cb(obj))
            end
         else
            args.callback_function = resolve
         end

         spawned_object = wrapped_function(args)
      end
   )

   if args.return_obj then
      return promise, spawned_obj
   else
      return promise
   end
end


-- ================================================================================

return TtsBase
