-- ================================================================================
-- Extensions for TTS's Objects.
-- ================================================================================

-- Modules.
local ArrayUtils = require("kintastic/lib/ArrayUtils")

-- Imports.
local make_set = ArrayUtils.make_set

-- The module.
local TtsObject = { }


-- ================================================================================
-- Private constants

local EMPTY_TABLE = { }

local FINITE_CONTAINERS = {   -- .name
   "Bag",
   "CheckerStack",
   "ChipStack",
   "Custom_Model_Bag",
   "Custom_Token_Stack",
   "Deck",
}

local INFINITE_CONTAINERS = {   -- .name
   "Custom_Model_Infinite_Bag",
   "go_game_bowl_black",
   "go_game_bowl_white",
   "Infinite_Bag",
}

local ZONES = {   -- .name
   "FogOfWar",
   "FogOfWarTrigger",
   "RandomizeTrigger",
   "ScriptingTrigger",
   -- No objects for hand zone.
}

local IS_INFINITE_CONTAINER_LOOKUP = make_set(INFINITE_CONTAINERS)
local IS_FINITE_CONTAINER_LOOKUP   = make_set(FINITE_CONTAINERS)
local IS_ZONE_LOOKUP               = make_set(ZONES)


-- ================================================================================
-- Public interface

-- ----------------------------------------
-- Public function TtsObject.getQuantity
--
-- `obj.getQuantity()` doesn't return the correct amount for
-- containers that were reduced to one object since the last frame.
--
-- Returns `-1` for infinite containers. At this time,
-- this is the case even if the infinite container contains
-- nothing. This may return `0` in the future.
--
-- Returns `nil` for non-containers.

function TtsObject.getQuantity(obj)
   local obj_type = obj.name
   if IS_INFINITE_CONTAINER_LOOKUP[obj_type] then
      return -1
   elseif IS_FINITE_CONTAINER_LOOKUP[obj_type] then
      local quantity = obj.getQuantity()
      return quantity > 0 and quantity or ( obj.remainder and 1 or 0 )
   else
      return nil
   end
end


-- ----------------------------------------
-- Public function TtsObject.getBounds
--
-- The results are based on the object's current orientation.
--
-- `obj.getBounds()` doesn't return the
-- correct size for zones, but this does.

function TtsObject.getBounds(obj)
   local bounds = obj.getBounds()

   if TtsObject.is_zone(obj) then
      local rotation = obj.getRotation()
      local size =
         obj.getScale()
         :rotateOver('z', rotation.z)
         :rotateOver('x', rotation.x)
         :rotateOver('y', rotation.y)

      bounds.size = Vector(
         math.abs(size.x),
         math.abs(size.y),
         math.abs(size.z)
      )
   end

   return bounds
end


-- ----------------------------------------
-- Public function TtsObject.getBoundsNormalized
--
-- The result is based on the unrotated object.
--
-- `obj.getBoundsNormalized()` doesn't return the
-- correct size for zones, but this does.


function TtsObject.getBoundsNormalized(obj)
   local bounds = obj.getBounds()

   if TtsObject.is_zone(obj) then
      bounds.size = obj.getScale()
   end

   return bounds
end


-- ----------------------------------------
-- Public function TtsObject.getSize
--
-- The result is based on the object's current orientation.
--
-- `obj.getBounds().size` doesn't return the
--  correct value for zones, but this does.

function TtsObject.getSize(obj)
   if TtsObject.is_zone(obj) then
      local rotation = obj.getRotation()
      local size =
         obj.getScale()
         :rotateOver('z', rotation.z)
         :rotateOver('x', rotation.x)
         :rotateOver('y', rotation.y)

      return Vector(
         math.abs(size.x),
         math.abs(size.y),
         math.abs(size.z)
      )
   else
      return obj.getBounds().size
   end
end


-- ----------------------------------------
-- Public function TtsObject.getSizeNormalized
--
-- The result is based on the unrotated object.
--
-- `obj.getBoundsNormalized().size` doesn't return
-- the correct value for zones, but this does.


function TtsObject.getSize(obj)
   if TtsObject.is_zone(obj) then
      return obj.getScale()
   else
      return obj.getBoundsNormalized().size
   end
end


-- ----------------------------------------
-- Public function TtsObject.get_abs_width()
-- Public function TtsObject.get_abs_height()
-- Public function TtsObject.get_abs_depth()
--
-- These refer to the dimensions of the object
-- along the x, y and z axes respectively.
--
-- The results are based on the object's current orientation.

function TtsObject.get_abs_width(obj)  return TtsObject.getSize(obj).x end
function TtsObject.get_abs_height(obj) return TtsObject.getSize(obj).y end
function TtsObject.get_abs_depth(obj)  return TtsObject.getSize(obj).z end


-- ----------------------------------------
-- Public function TtsObject.get_top_pos
--
-- Returns the position which consists
-- - the center x of the object's bounding box,
-- - the center z of the object's bounding box, and
-- - the highest y of the object's bounding box.
--
-- The result is based on the object's current orientation.

function TtsObject.get_top_pos(obj)
   local bounds = TtsObject.getBounds(obj)
   local v = bounds.center
   v.y = v.y + bounds.size.y / 2
   return v
end


-- ----------------------------------------
-- Public function TtsObject.get_bot_pos
--
-- Returns the position which consists
-- - the center x of the object's bounding box,
-- - the center z of the object's bounding box, and
-- - the lowest y of the object's bounding box.
--
-- The result is based on the object's current orientation.

function TtsObject.get_bot_pos(obj)
   local bounds = TtsObject.getBounds(obj)
   local v = bounds.center
   v.y = v.y - bounds.size.y / 2
   return v
end


-- ----------------------------------------
-- Public function TtsObject.get_height_to_origin
--
-- Returns the difference between the object's origin and the lowest y of the object's box.
--
-- The result is based on the object's current orientation.

function TtsObject.get_height_to_origin(obj)
   local bounds = TtsObject.getBounds(obj)
   return bounds.size.y / 2 + bounds.offset.y
end


-- ----------------------------------------
-- Public function TtsObject.get_drop_pos
--
-- Returns the position to which to move the object so it sits just above the container.
-- The result is based on the current orientation of both the object and the container.
--
-- Options:
--   protrusion: What portion of the object should be atop the container. (Default = 1)
--   offset:     A vector-like added to the result. (Default = {0,0,0})

function TtsObject.get_drop_pos(obj, container, opts)
   opts = opts or EMPTY_TABLE

   local protrusion = opts.protrusion or 1
   local offset     = opts.offset

   local pos = TtsObject.get_top_pos(container)
   local bounds = TtsObject.getBounds(obj)
   pos.y = pos.y + bounds.offset.y + bounds.size.y * ( protrusion - 0.5 )

   if offset then
      pos = pos + Vector(offset)
   end

   return pos
end


-- ----------------------------------------
-- Public function TtsObject.setTransform
--
-- Wraps setPosition, setRotation and setScale,
-- allowing any combination to be performed at once.

function TtsObject.setTransform(obj, args)
   args = args or EMPTY_TABLE

   local result = true
   if args.position then result = obj.setPosition( args.position ) and result end
   if args.rotation then result = obj.setRotation( args.rotation ) and result end
   if args.scale    then result = obj.setScale(    args.scale    ) and result end
   return result
end


-- ----------------------------------------
-- Public function TtsObject.setTransformSmooth
--
-- Wraps setPositionSmooth and setRotationSmooth,
-- allowing any combination to be performed at once.

function TtsObject.setTransformSmooth(obj, args)
   args = args or EMPTY_TABLE

   local result = true
   if args.position then result = obj.setPositionSmooth( args.position, args.collide, args.fast ) and result end
   if args.rotation then result = obj.setRotationSmooth( args.rotation, args.collide, args.fast ) and result end
   return result
end


-- ----------------------------------------
-- Public function TtsObject.moveAtop
--
-- Moves an object so it sits atop another object.
-- Uses instant movement.
--
-- Options:
--   rotation:   `false` to keep its current rotation (default),
--               `true` to give the moved object the same rotation as the reference object, or
--               a vector-like to give the object this rotation.
--   protrusion: What portion of the object being moved should be atop the other. (Default = 1)
--   offset:     A vector-like used to modify the destination position. (Default = {0,0,0})

function TtsObject.moveAtop(obj, ref_obj, opts)
   opts = opts or EMPTY_TABLE

   local result = true

   if opts.rotation then
      local rot = opts.rotation == true and ref_obj.getRotation() or opts.rotation
      result = obj.setRotation(rot) and result
   end

   local pos = TtsObject.get_drop_pos(obj, ref_obj, opts)
   result = obj.setPosition(pos) and result

   return result
end


-- ----------------------------------------
-- Public function TtsObject.moveAtopSmooth
--
-- Moves an object so it sits above the center point of a zone.
-- Uses smooth movement.
--
-- Options:
--   rotation:   `false` to keep its current rotation (default),
--               `true` to give the moved object the same rotation as the reference object, or
--               a vector-like to give the object this rotation.
--   protrusion: What portion of the object being moved should be atop the other. (Default = 1)
--   offset:     A vector-like used to modify the destination position. (Default = {0,0,0})
--   collide:    As the obj.setPositionSmooth/obj.setRotationSmooth argument.
--   fast:       As the obj.setPositionSmooth/obj.setRotationSmooth argument.

function TtsObject.moveAtopSmooth(obj, ref_obj, opts)
   opts = opts or EMPTY_TABLE

   local result = true

   if opts.rotation then
      local old_rot = obj.getRotation()
      local new_rot = opts.rotation == true and ref_obj.getRotation() or opts.rotation
      result = obj.setRotation(new_rot) or result
      local pos = TtsObject.get_drop_pos(obj, ref_obj, opts)
      result = obj.setRotation(old_rot) or result

      result = obj.setPositionSmooth(pos,     opts.collide, opts.fast) and result
      result = obj.setRotationSmooth(new_rot, opts.collide, opts.fast) and result
   else
      local pos = TtsObject.get_drop_pos(obj, ref_obj, opts)
      result = obj.setPositionSmooth(pos, opts.collide, opts.fast) and result
   end

   return result
end


-- ----------------------------------------
-- Public function TtsObject.moveToZoneTop
-- Public function TtsObject.moveToZoneTopSmooth
--
-- WARNING: DEPRECATED/OBSLETE.

TtsObject.moveToZoneTop       = TtsObject.moveAtop
TtsObject.moveToZoneTopSmooth = TtsObject.moveAtopSmooth


-- ----------------------------------------
-- Public function TtsObject.is_container
-- Public function TtsObject.is_finite_container
-- Public function TtsObject.is_infinite_container

function TtsObject.is_container(obj)
   local name = obj.name
   return IS_FINITE_CONTAINER_LOOKUP[name] or IS_INFINITE_CONTAINER_LOOKUP[name]
end

function TtsObject.is_finite_container(obj)
   return IS_FINITE_CONTAINER_LOOKUP[ obj.name ]
end

function TtsObject.is_infinite_container(obj)
   return IS_INFINITE_CONTAINER_LOOKUP[ obj.name ]
end


-- ----------------------------------------
-- Public function TtsObject.is_stackable

function TtsObject.is_stackable(obj)
   local custom_obj = obj.getCustomObject()
   return custom_obj and custom_obj.stackable or false
end


-- ----------------------------------------
-- Public function TtsObject.is_stack
--
-- We can't just use `obj.getQuantity()` because it
-- can return a positive value for containers.

function TtsObject.is_stack(obj)
   return TtsObject.is_stackable(obj) and obj.getQuantity() > 1
end


-- ----------------------------------------
-- Public function TtsObject.is_zone

function TtsObject.is_zone(obj)
   return IS_ZONE_LOOKUP[ obj.name ]
end


-- ================================================================================

return TtsObject
