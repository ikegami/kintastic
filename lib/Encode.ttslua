-- ================================================================================
-- Character encoding/decoding utils
-- ================================================================================

-- The module.
local Encode = { }


-- ================================================================================
-- Public interface

-- ----------------------------------------
-- Public function Encode.codepoints
--
-- The interpreter is only capabable of handling 16-bit characters,
-- so code points above U+FFFF appear in strings as surrogate pairs.
-- This function returns an iterator that returns the string as code points.

function Encode.codepoints(s)
   local i = 0
   local n = #s
   return function()
      if s == nil or i >= n then
         return
      end

      i = i + 1
      local cp = string.unicode(s, i)
      if cp < 0xD800 or cp >= 0xE000 then
         -- Not a surrogate.
         return cp
      elseif cp < 0xDC00 then
         -- High surrogate.
         local cp2 = string.unicode(s, i+1)
         if cp2 == nil or cp2 < 0xDC00 or cp2 >= 0xE000 then
            -- High surrogate without following low surrogate.
            return 0xFFFD
         end

         i = i + 1
         return ( cp % 0x400 ) * 0x400 + ( cp2 % 0x400 ) + 0x10000
      else
         -- Low surrogate without preceding high surrogate.
         return 0xFFFD
      end
   end
end


-- ----------------------------------------
-- Public function Encode.encode_utf8

function Encode.encode_utf8(s)
   local encoded = ""
   for cp in Encode.codepoints(s) do
      if cp < 0x80 then
         encoded = encoded .. string.char(cp)
      elseif cp < 0x800 then
         -- 110xxxxx 10xxxxxx
         encoded = encoded .. string.char(
            0xC0 + ( cp / 0x40        ),
            0x80 + ( cp        % 0x40 )
         )
      elseif cp < 0x10000 then
         -- 1110xxxx 10xxxxxx 10xxxxxx
         encoded = encoded .. string.char(
            0xE0 + ( cp / 0x1000        ),
            0x80 + ( cp /   0x40 % 0x40 ),
            0x80 + ( cp          % 0x40 )
         )
      elseif cp < 0x110000 then
         -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
         encoded = encoded .. string.char(
            0xF0 + ( cp / 0x40000        ),
            0x80 + ( cp /  0x1000 % 0x40 ),
            0x80 + ( cp /    0x40 % 0x40 ),
            0x80 + ( cp           % 0x40 )
         )
      end
   end

   return encoded
end


-- ----------------------------------------
-- Public function Encode.decode_utf8

local num_most_significant_ones = {
   --[[ 80 ]]   [0]=1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
   --[[ 90 ]]       1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
   --[[ A0 ]]       1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
   --[[ B0 ]]       1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
   --[[ C0 ]]       2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2,
   --[[ D0 ]]       2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2,
   --[[ E0 ]]       3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3,
   --[[ F0 ]]       4, 4, 4, 4, 4, 4, 4, 4,   5, 5, 5, 5, 6, 6, 7, 8
}

local lead_byte_data_mask = {
   [2] = 0x1F,
   [3] = 0x0F,
   [4] = 0x07,
   [5] = 0x03,
   [6] = 0x01,
}

local min_by_seq_len = {
   [2] = 0x80,
   [3] = 0x800,
   [4] = 0x10000,
   [5] = 9^9^9,
   [6] = 9^9^9,
}

function Encode.decode_utf8(s)
   local i = 1
   local len = #s

   local function decode_single_utf8()
      local lead = string.unicode(s, i)
      i = i + 1

      if lead < 0x80 then
         return lead
      end

      local seq_len = num_most_significant_ones[ lead - 0x80 ];
      if seq_len == 1 or seq_len > 6 then
      end

      local mask = lead_byte_data_mask[seq_len]
      if not mask then
         return 0xFFFD
      end

      local cp = bit32.band(lead, mask)
      for j = 1, seq_len-1 do
         if i > len then
            return 0xFFFD
         end

         local byte = string.unicode(s, i)
         if byte == nil or bit32.band(byte, 0xC0) ~= 0x80 then
            return 0xFFFD
         end

         i = i + 1
         cp = bit32.lshift(cp, 6) + bit32.band(byte, 0x3F)
      end

      if cp < min_by_seq_len[seq_len] or ( cp >= 0xD800 and cp < 0xE000 ) or cp >= 0x10FFFF then
         return 0xFFFD
      end

      return cp
   end

   local out = { }
   while i <= len do
      local cp = decode_single_utf8()
      if cp >= 0x10000 then
         cp = cp - 0x10000
         table.insert(out, string.char(0xD800 + bit32.rshift(cp, 10)))
         table.insert(out, string.char(0xDC00 + bit32.band(cp, 0x3FF)))
      else
         table.insert(out, string.char(cp))
      end
   end

   return table.concat(out, "")
end


-- ================================================================================

return Encode
