local Set = require("kintastic/lib/Set")

local function compare(result, expected)
   local size = #expected

   if #result ~= size then
      return false
   end

   for i = 1, size do
      if result[i] ~= expected[i] then
         return false
      end
   end

   return true
end

local dispatch = {
   ["+"] = |a,b|a + b,
   ["-"] = |a,b|a - b,
   ["*"] = |a,b|a * b,
}

local tests = { }

local set, set1, set2
table.insert(tests, { "Set creation",
   function()
      set  = Set:new({ "a", "b", "c" })
      set1 = Set:new({ "m", "n", "o", "p" })
      set2 = Set:new({ "m", "n", "q", "r" })
      return true
   end
})

table.insert(tests, { "size",                 ||set:size() == 3  })
table.insert(tests, { "has member (present)", ||set:has("c")     })
table.insert(tests, { "has member (absent)",  ||not set:has("d") })

table.insert(tests, {
   "has member (added)",
   function()
      set:add("d")
      return set:has("d")
   end
})

table.insert(tests, {
   "has member (removed)",
   function()
      set:delete("c")
      return not set:has("c")
   end
})

table.insert(tests, {
   "get_values",
   function()
      local values = set:get_values()
      return compare(values, { "a", "b", "d" })
   end
})

table.insert(tests, {
   "values",
   function()
      local expected = { "a", "b", "d" }
      local i = 0
      for v in set:values() do
         i = i + 1
         if v ~= expected[i] then
            return false
         end
      end

      return i == 3
   end
})

for i, test in ipairs({
   { "union",        "+", { "m", "n", "o", "p", "q", "r" } },
   { "difference",   "-", {           "o", "p"           } },
   { "intersection", "*", { "m", "n",                    } },
}) do
   local method, op, expected = table.unpack(test)

   table.insert(tests, {
      method,
      function()
         local result_set = Set[method](Set, set1, set2)
         return compare(result_set:get_values(), expected)
      end
   })

   table.insert(tests, {
      method .. " using " .. op,
      function()
         local result_set = dispatch[op](set1, set2)
         return compare(result_set:get_values(), expected)
      end
   })
end

return tests
