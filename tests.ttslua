-- ================================================================================
-- Test suite.
-- ================================================================================

-- The module.
local Test = { }


-- ================================================================================
-- Privates

-- ----------------------------------------
-- Private constants

local test_modules = {
   { "Base64",     require("kintastic/tests/Base64") },
   { "ColorUtils", require("kintastic/tests/ColorUtils") },
   { "Crc32",      require("kintastic/tests/Crc32") },
   { "Encode",     require("kintastic/tests/Encode") },
}

local test_modules_by_name = { }
for i, _ in ipairs(test_modules) do
   local name, test_module = table.unpack(_)
   test_modules_by_name[name] = test_module
end


-- ----------------------------------------
-- Private function info_msg
-- Private function error_msg

local function strong_msg(msg)  printToAll(msg, Color.Blue)  end
local function good_msg(msg)    printToAll(msg, Color.Green) end
local function info_msg(msg)    printToAll(msg, Color.White) end
local function error_msg(msg)   printToAll(msg, Color.Red)   end


-- ----------------------------------------
-- Private function run_test

local function run_test(state, name, f, ...)
   local success, rv = pcall(f, state, ...)
   if not success then
      error_msg(name .. ": failed (Exception)")
      error_msg(rv)
      return false
   elseif not rv then
      printToAll(name .. ": failed", Color.Red)
      return false
   else
      info_msg(name .. ": ok")
      return true
   end
end


-- ----------------------------------------
-- Private function run_test_module

local function run_test_module(name, test_module)
   strong_msg("[[ " .. name .. " ]]")

   if not test_module then
      error_msg("No test module named \"" .. name .. "\"")
      return 1, 0
   end

   local num_tests = #test_module
   local num_passed = 0

   local state = { }
   for i, test in ipairs(test_module) do
      if run_test(state, table.unpack(test)) then
         num_passed = num_passed + 1
      end
   end

   return num_tests, num_passed
end


-- ================================================================================
-- Public interface

-- ----------------------------------------
-- Public function Test.run_tests

function Test.run_tests(selected_tests)
   local num_tests  = 0
   local num_passed = 0

   if selected_tests then
      strong_msg("[[[[[[ Running test suite (selected modules) ]]]]]]")
      for i, name in ipairs(selected_tests) do
         local _num_tests, _num_passed = run_test_module(name, test_modules_by_name[name])
         num_tests  = num_tests  + _num_tests
         num_passed = num_passed + _num_passed
      end
   else
      strong_msg("[[[[[[ Running test suite (complete) ]]]]]]")
      for i, _ in ipairs(test_modules) do
         local _num_tests, _num_passed = run_test_module(table.unpack(_))
         num_tests  = num_tests  + _num_tests
         num_passed = num_passed + _num_passed
      end
   end

   strong_msg("[[[[[[ Summary ]]]]]]")
   info_msg(num_tests .. " tests")
   if num_passed == num_tests then
      good_msg("All tests passed.")
   else
      info_msg(num_passed .. " tests passed.")
      error_msg( ( num_tests - num_passed ) .. " tests failed.")
   end
end


-- ================================================================================

return Test
